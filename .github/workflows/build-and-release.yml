name: Build and Release Tauri App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.platform }}

    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.7.1  # Match packageManager field exactly

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
      - name: Install Tauri CLI
        run: pnpm install -g @tauri-apps/cli

      - name: Run prebuild script
        run: pnpm run prebuild

      - name: Build Tauri app
        run: pnpm run tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run postbuild script
        run: pnpm run postbuild

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-${{ matrix.platform }}
          path: src-tauri/target/release/bundle/

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release

      - name: Create release branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b release-${{ github.run_number }}
          git add ./release
          git commit -m "Add release artifacts for build ${{ github.run_number }}"
          git push origin release-${{ github.run_number }}

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(jq -r '.version' package.json)
          gh release create v$VERSION \
            --title "Release $VERSION" \
            --draft \
            --generate-notes

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(jq -r '.version' package.json)
          
          # Upload .dmg file from macOS build
          DMG_FILE=$(find ./release/tauri-app-macos-latest/dmg -name "*.dmg")
          if [ -n "$DMG_FILE" ]; then
            gh release upload v$VERSION "$DMG_FILE"
          else
            echo "No .dmg file found to upload."
          fi

          # Upload setup files from Windows build
          for file in $(find ./release/tauri-app-windows-latest -type f); do
            FILENAME=$(basename "$file")
            if gh release view v$VERSION --json assets | jq -e ".assets[].name" | grep -q "$FILENAME"; then
              echo "Skipping existing file: $FILENAME"
            else
              gh release upload v$VERSION "$file"
            fi
          done
